What happens when you initialize a repository? Why do you need to do it?

     When you initialize a repositoryyou are creating a git version control file system.
 This means that git will now record all committed changes and keep a snapshot of all of
 your files status for each commit. This is neccesary so that you can go back and review
prior states of your files. Creating a git repository allows for function such as diff 
and log to be preformed on your files.

How is the staging area different from the working directory and the respository? What 
value do you think it offers?  

    The staging area is just that an intermediate zone between your working directory an
d the git repository, it's used to stage your commits to your git repository. This
 provides you with finite control on what files are commited and at what time. You have
 finer control on determining logical commits when you have been working on many differ
erent files in your working directory. Allowing you to selective commits the changes you
've made to many files allows you if you wish to make a comment for each individual file
.

How can you use the staging area to makes sure you have one commit per logical change?

    Using the staging area allows you to manually select which files you wish to commit.
This means that if you have a dozen files with changes you can commit however many you w
ant from 1 to 12 and add comments as appropriate.

What are some some situations when branches would be helpful in keeping your history org
anized? How would branches help? 

 Branches are an excellent tool for trying out different approaches for your code. If 
you wished to experiment with a new feature, provide different version for different
platforms or operating systems. With branches you can play around with your code without
having to worry about affecting the master branch until and if you wish to merge the 
experiement into the main branch of code.

How do the diagrams help you visualize the branch structure?

    The diagrams provide a much simplier visual aid then the text for descibing how the 
commits and branches are structured. It's much more intuitive to look at a directed grap
h then to discphifer the text branch names. 

   
